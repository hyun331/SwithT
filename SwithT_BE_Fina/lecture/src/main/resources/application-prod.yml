spring:
  config:
    activate:
      on-profile: prod
  redis:
    host: ${REDIS_HOST}
    port: 6379

  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://${DB_HOST}:3306/switht_lecture
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    tomcat:
      max-active: 5

  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MariaDBDialect
    generate-ddl: true
    hibernate:
      ddl-auto: update
    show-sql: true

  data:
    elasticsearch:
      connection-timeout: 5000
      socket-timeout: 10000

  kafka:
    bootstrap-servers: ${KAFKA_SERVER}
    consumer:
      #      group-id는 컨슈머 그룹을 식별하는 ID. 동일한 그룹 ID를 가진 컨슈머들을 메시지를 분담해서 consume.
      group-id: lecture-group-${POD_NAME}
      #      가장 처음으로 사용 가능한 메시지부터 읽기 시작
      auto-offset-reset: earliest
    properties:
      security.protocol: SASL_SSL
      sasl.mechanism: AWS_MSK_IAM
      sasl.jaas.config: software.amazon.msk.auth.iam.IAMLoginModule required;
      sasl.client.callback.handler.class: software.amazon.msk.auth.iam.IAMClientCallbackHandler

  opensearch:
    url: ${OPENSEARCH_URL}
    region: ap-northeast-2  # 리전 설정
    index-settings:
      shards: 5
      replicas: 1
    username: ${OPENSEARCH_USERNAME}
    password: ${OPENSEARCH_PASSWORD}

jwt:
  expiration: 300
  secretKey: ${JWT_SECRET}
  expirationRt: 14400
  secretKeyRt: ${JWT_SECRET_RT}

cloud:
  aws:
    credentials:
      access-key: ${AWS_ACCESS_KEY}
      secret-key: ${AWS_SECRET}
    region:
      static: ap-northeast-2  # S3 및 OpenSearch 동일 리전 사용
    s3:
      bucket: minseong-file