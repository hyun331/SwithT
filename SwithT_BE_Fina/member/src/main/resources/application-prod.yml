server:
  servlet:
    session:
      cookie:
        name: "tweety-session"
#        same-site: none # SameSite 속성 설정
#        secure: true
    encoding:
      charset: UTF-8
      force: true
    multipart:
      max-file-size: 10MB  # 파일 하나의 최대 크기
      max-request-size: 10MB

spring:
  config:
    activate:
      on-profile: prod
  security:
    oauth2:
      client:
        registration:
          google:
            client-name: google
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "https://server.switht.co.kr/member-service/login/oauth2/code/google"
            authorization-grant-type: authorization_code
            scope:
              - profile
              - email
          kakao:
            client-name: Kakao
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: "https://server.switht.co.kr/member-service/login/oauth2/code/kakao"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope:
              - account_email
              - profile_nickname
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
  redis:
    host: ${REDIS_HOST}
    port: 6379 # 포트 충돌로 변경함. 김민성 10-08
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://${DB_HOST}:3306/switht_member
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    tomcat:
      max-active: 5
  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MariaDBDialect
    generate-ddl: true
    hibernate:
      ddl-auto: update
    show_sql: true

  kafka:
    bootstrap-servers: ${KAFKA_SERVER}
    consumer:
      #      group-id는 컨슈머 그룹을 식별하는 ID. 동일한 그룹 ID를 가진 컨슈머들을 메시지를 분담해서 consume.
      group-id: member-group
      #      가장 처음으로 사용 가능한 메시지부터 읽기 시작
      auto-offset-reset: earliest
    properties:
      security.protocol: SASL_SSL
      sasl.mechanism: AWS_MSK_IAM
      sasl.jaas.config: software.amazon.msk.auth.iam.IAMLoginModule required;
      sasl.client.callback.handler.class: software.amazon.msk.auth.iam.IAMClientCallbackHandler

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${SMTP_USERNAME}
    password: ${SMTP_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000
    #  5 * 60 * 1000 == 5분
    auth-code-expiration-millis: 300000

  rabbitmq:
    ssl:
      enabled: true
    host: ${MQ_HOST}
    port: 5671
    username: ${MQ_USERNAME}
    password: ${MQ_PASSWORD}
    virtual-host: /
  listener:
    simple:
      acknowledge-mode: manual

jwt:
  expiration: 300
  secretKey: ${JWT_SECRET}
  expirationRt: 14400
  secretKeyRt: ${JWT_SECRET_RT}

cloud:
  aws:
    credentials:
      access-key: ${AWS_ACCESS_KEY}
      secret-key: ${AWS_SECRET}
    region: #S3 지역
      static: ap-northeast-2
    s3: #버킷이름
      bucket: minseong-file
      folder:
        folderName1: member-service/
    stack:
      auto: false

twilio:
  account-sid: ${TWILIO_SID}
  auth-token: ${TWILIO_ACCESS_TOKEN}
  phone-number: ${TWILIO_PHONE_NUMBER}

profile:
  image:
    male: https://minseong-file.s3.ap-northeast-2.amazonaws.com/member/%EB%82%A8%EC%9E%90%EB%94%94%ED%8F%B4%ED%8A%B8%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%83%98%ED%94%8C%ED%8C%8C%EC%9D%BC.jpg
    female: https://minseong-file.s3.ap-northeast-2.amazonaws.com/member/%EB%94%94%ED%8F%B4%ED%8A%B8%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%83%98%ED%94%8C.jpg`